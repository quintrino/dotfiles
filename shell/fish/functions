function e
    if test $argv
        $EDITOR -a --goto $argv
    else
        $EDITOR -a .
    end
end

function g
    if test $argv
        git $argv
    else
        git status --short
        git diff --shortstat | grep -v "EMPTY"
    end
end

function gl
    if test $argv
        git log --oneline -$argv
    else
        git log --oneline -1
    end
end

function sw
    if test $argv
        git switch $argv
    else
        git switch -
    end
end

function install_pg
    gem install pg  -v '1.2.3' -- --with-pg-config=(asdf where postgres)"/bin/pg_config"
end

function gbf
  set branch (git branch -vv | fzf --preview 'git diff master..{2}')
  git checkout (echo $branch | awk '{print $1}')
end

function gbc
    set branch (string join _ $argv)
    git switch -c $branch
end

function o
    if test $argv
        open $argv
    else
        open .
    end
end

function evs
        env | fzf --height 10%
end

function ef
    if test $argv
        set fzf_file (fd . $argv[1] | fzf --height 20%)
    else
        set fzf_file (fd . ~/.dotfiles | fzf --height 20%)
    end
    if test $status -eq 0
        $EDITOR $fzf_file
    end
end

function af
    set fzf_file (fd . . | fzf --height 20%)
    if test -d $fzf_file
        cd $fzf_file
    else
        bat $fzf_file
    end
end

function git_track_untracked
    git ls-files --others --exclude-standard | xargs git add -N
end

function git_untrack_new_blank
    git diff --name-only --no-renames --diff-filter=A | xargs git reset --quiet --
end

function yt
    echo 'Switching to Download/videos'
    mkdir -p $HOME/Downloads/videos
    cd $HOME/Downloads/videos
    echo 'Downloading video using yt-dlp'
    yt-dlp "$argv"
end

function logic
     echo -e "\033[1;31m If applied this commit will... \033[0m"
end

function stop
    if test -d $argv
        echo "No port provided, killing port 3000 "
        kill -9 (lsof -i tcp:3000 -t)
    else
        kill -9 (lsof -i tcp:$argv -t)
    end
end

function alert
    eval "$argv"
    echo "$argv" | xargs -I {} osascript -e 'display alert "{} complete"'
end

function tmux_title
  clear
  tmux set-option -g pane-border-style "bg=blue,fg=white"
  printf "\033]2;%s\033\\" "$argv"
end

function up
  if test -d $argv
    cd ..
  else if string match -qr '^[0-9]+$' $argv[1]
    for i in (seq 1 $argv[1])
        cd ..
    end
  else
    echo "Usage: Provide a number of directories to go up. Defaults to 1"
  end
end

function mise_cleanse
    set -l lang $argv[1]
    if test -z "$lang"
        set lang ruby
    end

    set -l latest_version (mise latest $lang)

    for lang_version in (mise list $lang | grep -v "$latest_version" | awk '{print $2}')
        mise uninstall $lang $lang_version
    end
end

function freq
    cat $XDG_DATA_HOME/fish/history/* |\
    cut -d';' -f2 |\
    sed -E "s/ *[0-9]+  //" |\
    sort |\
    uniq -c |\
    sort -rn |\
    head -50
end

function smart_cd
    set base_dir "$argv[1]"  # Change this to the actual path of your 'con' directory
    cd $base_dir
    set partial $argv[2]

    if test -n "$partial"
        set matches (find $base_dir -maxdepth 1 -type d -name "$partial*")
        if test (count $matches) -gt 0
            cd $matches[1]
            echo "Changed to directory: $matches[1]"
        else
            echo "No matching directory found for '$partial'"
        end
    else
    end
end

function ef
    if test (count $argv) -gt 0
        set fzf_file (fd . $argv[1] | fzf --height 20%)
    else
        set fzf_file (fd | fzf --height 20%)
    end
    if test $status -eq 0
        eval $EDITOR "$fzf_file"
    end
end

function dotter_update
  cd $HOME/.dotfiles
  dotter \
    --global-config $HOME/.dotfiles/config/dotter/global.toml \
    --local-config $HOME/.dotfiles/config/dotter/local.toml \
    --cache-file $XDG_CACHE_HOME/dotter.toml \
    --cache-directory $XDG_CACHE_HOME/dotter/ \
    --verbose --verbose
end
