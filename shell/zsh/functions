#!/bin/sh
ct () {
  for code in $(seq 000 255); do
    print -P -- "$code: %F{$code} $1 %f"
  done
}

# `gl [<remote>] [<branch>]` git pull
# pull <branch> or the current branch from <remote> or origin
gpl(){
  local remote=${1:-origin}
  local branch=${2:-$(git_current_branch)}
  git pull --no-edit "$remote" "$branch"
}

stop() {
  if [[ $# -gt 0 ]]; then
    kill -9 "$(lsof -i tcp:"$*" -t)"
  else
    echo "No port provided, killing port 3000 "
    kill -9 "$(lsof -i tcp:3000 -t)"
  fi
}

tmux_pane() {
  tmux select-pane -t:."$TMUX_PANE" -P 'bg=colour232'
}

arv() {
  ASDF_RUBY_VERSION=$1 "${@:2}"
}

tmux_title() {
  clear
  tmux set-option -g pane-border-style "bg=red,fg=white"
  printf "\033]2;%s\033\\" "$@"
}

# `glf [<remote>] [<branch>]` git pull force
# force pull <branch> or the current branch from <remote> or origin
glf() {
  local remote=${1:-origin}
  local branch=${2:-$(git_current_branch)}
  git fetch "$remote" "$branch" && git reset --hard "$remote"/"$branch"
}

vsplit_tab() {
  local command="cd \\\"$PWD\\\"; clear"
  (( $# > 0 )) && command="${command}; $*"

  the_app=$(_omz_osx_get_frontmost_app)

  if [[ "$the_app" == 'iTerm' ]]; then
    osascript <<EOF
      -- tell application "iTerm" to activate

      tell application "System Events"
        tell process "iTerm"
          tell menu item "Split Vertically With Current Profile" of menu "Shell" of menu bar item "Shell" of menu bar 1
            click
          end tell
        end tell
        keystroke "${command} \n"
      end tell
EOF

  elif [[ "$the_app" == 'iTerm2' ]]; then
      osascript <<EOF
        tell application "iTerm2"
          tell current session of first window
            set newSession to (split vertically with same profile)
            tell newSession
              write text "${command}"
              select
            end tell
          end tell
        end tell
EOF

  else
    echo "$0: unsupported terminal app: $the_app" >&2
    false

  fi
  unset the_app
}

_omz_osx_get_frontmost_app() {
  the_app=$(
    osascript 2>/dev/null <<EOF
      tell application "System Events"
        name of first item of (every process whose frontmost is true)
      end tell
EOF
  )
  echo "$the_app"
  unset the_app
}

gj () { git branch "$1" && git switch "$1"; }

mcd () {
    mkdir -p "$1"
    cd "$1" || exit
}

g() {
  if [[ $# -gt 0 ]]; then
    git "$@"
  else
    git status --short
  fi
}

e() {
  if [[ $# -gt 0 ]]; then
    $EDITOR -a --goto "$@"
  else
    $EDITOR -a .
  fi
}

gl() {
  if [[ $# -gt 0 ]]; then
    git log --oneline -"$*"
  else
    git log --oneline -1
  fi
}

gcf() {
  git log "$@" --oneline -1
  git commit --fixup="$*" && GIT_SEQUENCE_EDITOR=true git rebase --autosquash --autostash "$*"^ -i
}

git_status_filtered() {
  git status --porcelain | rg -F "$* " | colrm 1 3 | quote_lines
}

quote() {
  if (( $# > 0 )); then
    local string=$*
    if [[ -z "$string" ]]; then
      echo -en '""'
    elif [[ "$string" = *"'"* ]]; then
      echo -en \""$(echo -en "$string" | sed -E 's/(["$])/\\\1/g')\""
      #elif [[ "$string" =~ \|\(|\)|\[|\]|\$ ]]; then
      # echo -en "'$string'"
    else
      echo -en "$string"
    fi
  fi
}

quote_lines() {
  while read -r line; do
    echo -e $(quote "$line")
  done
}

git_current_branch() {
  git rev-parse --symbolic-full-name --abbrev-ref HEAD 2>/dev/null
}

git_edit() {
  eval "$GIT_EDITOR" "$@"
}

git_conflicts_with_line_numbers(){
  git_status_filtered UU | xargs grep -nHoE -m 1 '^<{6}|={6}|>{6}' | cut -d: -f1-2 | quote_lines
}

git_open_conflicts() {
  active_conflicts=$(git_conflicts_with_line_numbers)
  if [[ -n "$active_conflicts" ]]; then
    git_edit "$active_conflicts" && git_open_conflicts
  fi
  unset active_conflicts
}

git_prepare_content_conflicts() {
  git_open_conflicts
  git_status_filtered UU | xargs git add
}

bail() {
  count=$(wc -l < "$1")
  local final_line=$(( count - 0 ))
  if [[ $# == 1 ]]; then
  local ten_count=$(( count - 10 ))
  else
  local ten_count=$(( count - $2 + 1 ))
  fi
  bat "$1" --line-range "$ten_count":"$final_line"
  unset count
}

bead() {
  if [[ $# == 1 ]]; then
    local final_line=10
  else
    local final_line="$2"
  fi
  bat "$1" --line-range 1:"$final_line"
}

git_untrack_new_blank() {
  git diff --name-only --no-renames --diff-filter=A | xargs git reset --quiet --
}

gfh() {
  local filename=$1
    git log --oneline --follow --patch master..HEAD -- "$filename"
}

files_changed_in_commit() {
  git diff-tree --no-commit-id --name-only -r "$@"
}

files_changed_in_branch() {
  git diff master... --name-only
}

eb() {
  $EDITOR $(files_changed_in_branch)
}

ec() {
  if [[ $# -gt 0 ]]; then
    $EDITOR "$(files_changed_in_commit "$1")"
  else
    $EDITOR "$(files_changed_in_commit HEAD)"
  fi
}

path() {
  echo "$PATH" | tr ":" "\n" | \
    awk "{  sub(\"/usr\",   \"${fg_no_bold[green]}/usr$reset_color\"); \
            sub(\"/bin\",   \"${fg_no_bold[blue]}/bin$reset_color\"); \
            sub(\".config/asdf/shims\",   \"${fg_no_bold[red]}.config/asdf/shims$reset_color\"); \
            sub(\"-$RUBY_VERSION\",   \"${fg_no_bold[red]}-$RUBY_VERSION$reset_color\"); \
            sub(\"/opt\",   \"${fg_no_bold[cyan]}/opt$reset_color\"); \
            sub(\"/sbin\",  \"${fg_no_bold[magenta]}/sbin$reset_color\"); \
            sub(\"$HOME\",  \"\$HOME$reset_color\"); \
            sub(\"/local\", \"${fg_no_bold[yellow]}/local$reset_color\"); \
            print }"
}

update() {
  tmuxinator start update
}

singled_threaded_update() {
  starting_directory=$(pwd)
  fresh_update
  asdf_update
  zinit_update
  ruby_update
  brew_update
  mac_software_update
  vscode_update
  printf "\033[1;31mBrew Doctor issues \033[0m\n"
  brew doctor
  cd "$starting_directory" && unset starting_directory
  exec zsh
}

doctor_update() {
  printf "\033[1;31mBrew Doctor issues \033[0m\n"
  brew doctor
}

fresh_update() {
  printf "\033[1;31mUpdating Fresh \033[0m\n"
  fresh up | rg -v "Current branch master is up to date."
}

asdf_update() {
  export KERL_CONFIGURE_OPTIONS="--disable-debug --without-javac"
  cd "$HOME" && asdf plugin-update --all
  printf "\033[1;31mUpdating asdf plugins \033[0m\n"
  while read -r line; do
    asdf plugin-add "$(echo "$line" | cut -f 1 -d " " )"
    if [ $? -eq 2 ]
    then
      continue
    fi
    case "$(echo "$line" | cut -f 1 -d " " )" in
      "nodejs") bash "$ASDF_DATA_DIR/plugins/nodejs/bin/import-release-team-keyring"
    esac
  done <"$XDG_CONFIG_HOME/asdf/.tool-versions"
  while read -r line; do
    asdf global "$(echo "$line" | cut -f 1 -d " " )" "$(echo "$line" | cut -f 2 -d " " )"
  done <"$XDG_CONFIG_HOME/asdf/.tool-versions"
  cd "$XDG_CONFIG_HOME/asdf" && asdf install
  cp -f "$XDG_CONFIG_HOME"/asdf/.tool-versions ~/.dotfiles/config/asdf/static
  unset KERL_CONFIGURE_OPTIONS
  cd "$HOME" || exit
}

zinit_update() {
  printf "\033[1;31mUpdating Zinit \033[0m\n"
  zi self-update
  printf "\033[1;31mUpdating Zsh plugins \033[0m\n"
  zi update --parallel
}

ruby_update() {
  printf "\033[1;31mUpdating Ruby Gems \033[0m\n"
  cd ~/.dotfiles/language/ruby && gem update --system
  printf "\033[1;31mUpdating Bundler \033[0m\n"
  cd ~/.dotfiles/language/ruby && gem install bundler
  printf "\033[1;31mUpdating Gems \033[0m\n"
  cd ~/.dotfiles/language/ruby && bundle update
}

brew_update() {
  printf "\033[1;31mUpdating Brew \033[0m\n"
  brew update
  printf "\033[1;31mUpgrading Brew \033[0m\n"
  brew upgrade
  printf "\033[1;31mOutdated Casks \033[0m\n"
  brew upgrade --cask
}

mac_software_update() {
  printf "\033[1;31mUpdating Mac Software \033[0m\n"
  xcode-select -p 1>/dev/null;local xcode_installed=$?
  if ! [[ $xcode_installed -eq '0' ]]; then
    printf 'XCode CLI Tools not installed, Installing now'
    xcode-select --install
  fi
  softwareupdate -ia
}

vscode_update() {
  printf "\033[1;31mUpdating VS Code Extensions \033[0m\n"
  if [ "$(cat ~/.dotfiles/apps/vs-code/extensions)" = "$(code --list-extensions)" ]; then
    echo 'All extensions installed'
    return 0
  fi
  while read -r line; do
    code --install-extension "$line"
  done <~/.dotfiles/apps/vs-code/extensions
  rm ~/.dotfiles/apps/vs-code/extensions
  code --list-extensions | while read -r line; do
    echo "$line" >> ~/.dotfiles/apps/vs-code/extensions
  done
}

grb() {
  git rebase -i HEAD~"$1" -p --autostash
}

ginit() {
  git init --quiet
  cp "$HOME/.dotfiles/config/git/overcommit" .overcommit.yml
  overcommit --install
  overcommit --sign
}

asdf_ruby_version() {
  if [ ! -f .tool-versions ]; then
    echo "$ASDF_GLOBAL_RUBY"
  else
    local_ruby_version=$(bat .tool-versions | rg "ruby")
    echo "$local_ruby_version"
  fi
  unset local_ruby_version
}

current_directory() {
  print -P "%~"
}

restart_mongodb() {
  mongo --eval "db.getSiblingDB('admin').shutdownServer()"
  mongod --dbpath ~/.config/asdf/installs/mongodb/3.6.9/data
}

exer_all() {
  if ! [[ $# -eq 1 ]] ; then
    echo 'You must provide a single language as an argument'
    return 1
  else
    local language=$1
    cd "/Users/nick.wolf/Code/Personal/exercism" || exit
    mkdir "$language"
    cd "$language" || exit
    curl -LS "https://exercism.io/tracks/$language/exercises" \
    | grep "/tracks/$language/exercises/" \
    | awk '{print $3}' \
    | cut -d/ -f5 \
    | cut -d\" -f1 > exercises.txt
    while read -r line; do
      exercism download --exercise="$line" --track="$language";
    done < exercises.txt
  fi
}

evs() {
  env | fzf --height 10%
}

o() {
  if [[ $# -gt 0 ]]; then
    open "$@"
  else
    open .
  fi
}

sw() {
  if [[ $# -gt 0 ]]; then
    git switch "$@"
  else
    git switch -
  fi
}

rails() {
  if [[ "$1" == 'new' ]]; then
    echo string
    command rails new --rc "$XDG_CONFIG_HOME/rails/railsrc"
  else
    command rails "$@"
  fi
}

rename() {
  for f in *; do mv "$f" "${f//$1/$2}"; done
}

bulk_replace() {
  sed -i'bak' 's|$1|$2|g'
}

convert_docx_to_md() {
  for i in *.docx ; do echo "$i" && pandoc -s $i -o $i.md ; done
}

ds_store_remove() {
  fd --hidden '.DS_Store' | tr \\n \\0 | xargs -0 rm
}

quote() {
  cd $HOME/Code/Personal/nickwolf.com.au
  $EDITOR quotes.md
}

jo() {
  cd "$HOME/Documents/obsidian/journal" || return
  if [ ! -f "$(date +%Y%m%d).md" ]; then
    cp "template.md" "$(date +%Y%m%d).md"
  fi
  open "obsidian://open?vault=obsidian&file=journal%2F$(date +%Y%m%d)"
}

dismiss_safari_invite() {
  defaults write com.apple.coreservices.uiagent CSUIHasSafariBeenLaunched -bool YES
  defaults write com.apple.coreservices.uiagent CSUIRecommendSafariNextNotificationDate -date 2050-01-01T00:00:00Z
  defaults write com.apple.coreservices.uiagent CSUILastOSVersionWhereSafariRecommendationWasMade -float 10.99
}

lc() {
  ls -A | wc -l
}
