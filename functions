#!/bin/zsh
function ct () {
    for code ({000..255}) print -P -- "$code: %F{$code} $1 %f"
}

# `gl [<remote>] [<branch>]` git pull
# pull <branch> or the current branch from <remote> or origin
function gl(){
  local remote=${1:-origin}
  local branch=${2:-$(git_current_branch)}
  git pull --no-edit "$remote" "$branch"
}

# `glf [<remote>] [<branch>]` git pull force
# force pull <branch> or the current branch from <remote> or origin
function glf() {
  local remote=${1:-origin}
  local branch=${2:-$(git_current_branch)}
  git fetch "$remote" "$branch" && git reset --hard "$remote"/"$branch"
}

function cc_menu {
  local branch=${1:-$(git_current_branch)}
  local project=$(basename -s .git `git config --get remote.origin.url`)

  if ! defaults read net.sourceforge.cruisecontrol.CCMenu Projects | grep -qF "$project - remote ($branch)"; then
    killall CCMenu
    defaults write net.sourceforge.cruisecontrol.CCMenu Projects "(
      { displayName = $branch; projectName = \"$project - remote ($branch)\"; serverUrl = \"https://cc.buildkite.com/$project/$project-remote.xml?access_token=$CC_BUILDKITE_TOKEN&branch=$branch\"; },
      $(defaults read net.sourceforge.cruisecontrol.CCMenu Projects | tail -n +2)"
    open -g /Applications/CCMenu.app
  fi
}

function vsplit_tab() {
  local command="cd \\\"$PWD\\\"; clear"
  (( $# > 0 )) && command="${command}; $*"

  local the_app=$(_omz_osx_get_frontmost_app)

  if [[ "$the_app" == 'iTerm' ]]; then
    osascript <<EOF
      -- tell application "iTerm" to activate

      tell application "System Events"
        tell process "iTerm"
          tell menu item "Split Vertically With Current Profile" of menu "Shell" of menu bar item "Shell" of menu bar 1
            click
          end tell
        end tell
        keystroke "${command} \n"
      end tell
EOF

  elif [[ "$the_app" == 'iTerm2' ]]; then
      osascript <<EOF
        tell application "iTerm2"
          tell current session of first window
            set newSession to (split vertically with same profile)
            tell newSession
              write text "${command}"
              select
            end tell
          end tell
        end tell
EOF

  else
    echo "$0: unsupported terminal app: $the_app" >&2
    false

  fi
}

function _omz_osx_get_frontmost_app() {
  local the_app=$(
    osascript 2>/dev/null <<EOF
      tell application "System Events"
        name of first item of (every process whose frontmost is true)
      end tell
EOF
  )
  echo "$the_app"
}

function gj () { git branch "$1" && git checkout "$1"; }

function mcd () {
    mkdir -p $1
    cd $1
}

function g() {
  if [[ $# -gt 0 ]]; then
    git "$@"
  else
    git status --short
  fi
}

function gl() {
  if [[ $# -gt 0 ]]; then
    git log --oneline -$@
  else
    git log --oneline -1
  fi
}

function gcf() {
  git log $@ --oneline -1
  git commit --fixup=$@ && git rebase --autosquash --autostash $@^ -i
}

function git_status_filtered() {
  git status --porcelain | rg -F "$* " | colrm 1 3 | quote_lines
}

function quote() {
  if (( $# > 0 )); then
    local string=$*
    if [[ -z "$string" ]]; then
      echo -en '""'
     elif [[ "$string" = *"'"* ]]; then
       echo -en \""$(echo -en "$string" | sed -E 's/(["$])/\\\1/g')\""
     #elif [[ "$string" =~ \|\(|\)|\[|\]|\$ ]]; then
     # echo -en "'$string'"
    else
     echo -en "$string"
    fi
  fi
}

function quote_lines() {
  while read -r line; do
    echo -e $(quote "$line")
  done
}

function git_edit() {
  $(git config core.editor) "$@"
}

function git_conflicts_with_line_numbers(){
  git_status_filtered UU | xargs grep -nHoE -m 1 '^<{6}|={6}|>{6}' | cut -d: -f1-2 | quote_lines
}

function git_open_conflicts() {
  local active_conflicts=$(git_conflicts_with_line_numbers)
  if [[ ! -z "$active_conflicts" ]]; then
    git_edit $active_conflicts && git_open_conflicts
  fi
}

function git_prepare_content_conflicts() {
  git_open_conflicts
  git_status_filtered UU | xargs git add
}

function bail() {
  local count=$(wc -l < "$1")
  local final_line="$(( $count - 0 ))"
  if [[ $# == 1 ]]; then
  local ten_count="$(( $count - 10 ))"
  else
  local ten_count="$(( $count - $2 + 1 ))"
  fi
  bat "$1" --line-range "$ten_count":"$final_line"
}

function bead() {
  if [[ $# == 1 ]]; then
  local final_line="$((10))"
  else
   local final_line="$(( $2 ))"
  fi
  bat "$1" --line-range 1:"$final_line"
}

function git_untrack_new_blank() {
  git diff --name-only --no-renames --diff-filter=A | xargs git reset --quiet --
}

function gfh() {
  local filename=$1
    git log --oneline --follow --patch master..HEAD -- "$filename"
}

function path() {
  echo $PATH | tr ":" "\n" | \
    awk "{ sub(\"/usr\",   \"$fg_no_bold[green]/usr$reset_color\"); \
           sub(\"/bin\",   \"$fg_no_bold[blue]/bin$reset_color\"); \
           sub(\".rubies/ruby\",   \"$fg_no_bold[red].rubies/ruby$reset_color\"); \
           sub(\"-$RUBY_VERSION\",   \"$fg_no_bold[red]-$RUBY_VERSION$reset_color\"); \
           sub(\"/opt\",   \"$fg_no_bold[cyan]/opt$reset_color\"); \
           sub(\"/sbin\",  \"$fg_no_bold[magenta]/sbin$reset_color\"); \
           sub(\"$HOME\",  \"\$HOME$reset_color\"); \
           sub(\"/local\", \"$fg_no_bold[yellow]/local$reset_color\"); \
           print }"
}
function update() {
  echo -e "\033[1;31mUpdating Bundler \033[0m"
  cd ~/.dotfiles/ruby && gem install bundler
  echo -e "\033[1;31mUpdating Gems \033[0m"
  cd ~/.dotfiles/ruby && bundle update
  echo -e "\033[1;31mUpdating Brew \033[0m"
  brew update
  echo -e "\033[1;31mUpgrading Brew \033[0m"
  brew upgrade
  echo -e "\033[1;31mOutdated Casks \033[0m"
  brew cask upgrade
  echo -e "\033[1;31mUpdating Mac Software \033[0m"
  softwareupdate -ia
  echo -e "\033[1;31mBrew Doctor issues \033[0m"
  brew doctor
}

function grb() {
  git rebase -i HEAD~$1 -p --autostash
}