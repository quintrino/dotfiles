quiet: true

CommitMsg:
  HardTabs:
    enabled: true
    description: "Check for hard tabs"

PreCommit:
  FixMe:
    enabled: true
    description: 'Check for "token" strings'
    required_executable: "grep"
    flags: ["-IEHnw"]
    keywords:
      [
        "BROKEN",
        "BUG",
        "ERROR",
        "FIXME",
        "HACK",
        "NOTE",
        "OPTIMIZE",
        "REVIEW",
        "TODO",
        "WTF",
        "XXX",
      ]

  ForbiddenBranches:
    enabled: true
    description: "Check for commit to forbidden branch"
    quiet: true
    branch_patterns: ["master", "production"]

  HardTabs:
    enabled: true
    description: "Check for hard tabs"
    quiet: true
    required_executable: "grep"
    flags: ["-IHn", "\t"]
    exclude:
      - "**/Makefile"
      - "**/*.go"

  TrailingWhitespace:
    enabled: true
    description: "Check for trailing whitespace"
    required_executable: "grep"
    flags: ["-IHn", "[ \t]$"]

  LineEndings:
    description: "Check line endings"
    enabled: true
    eol: "\n" # or "\r\n" for Windows-style newlines

  RuboCop:
    enabled: false
    command: ["bundle", "exec", "rubocop"]

  ShellCheck:
    enabled: false
    install_command: "brew install shellcheck"
    required_executable: "shellcheck"
    include: "**/*.sh"

PostCommit:
  Lolcommits:
    enabled: true
    install_command: "gem install lolcommits"
    description: "Capture commit based selfies as you code"
    required_executable: "lolcommits"
    command: ["lolcommits", "--capture"]

# Hooks that run during `git push`, after remote refs have been updated but
# before any objects have been transferred.
PrePush:
  CCMenu:
    enabled: false
    quiet: false
    required_executable: "cc_menu"
    command: ["cc_menu", "Name"] #Change Name to Project name from buildkite

  ProtectedBranches:
    enabled: false
    description: "Check for illegal pushes to protected branches"
    destructive_only: true
    branches: ["master", "production"]

  PushAlert:
    enabled: false
    quiet: false
    required_executable: "push_alert"
    command: ["push_alert"]

# Hooks that run during `git rebase`, before any commits are rebased.
# If a hook fails, the rebase is aborted.
PreRebase:
  MergedCommits:
    enabled: true
    description: "Check for commits that have already been merged"
    branches: ["master"]
